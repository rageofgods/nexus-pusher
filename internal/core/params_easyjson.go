// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package core

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF1d45baeDecodeNexusPusherInternalCore(in *jlexer.Lexer, out *NexusComponents) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]*NexusComponent, 0, 8)
					} else {
						out.Items = []*NexusComponent{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *NexusComponent
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(NexusComponent)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "continuationToken":
			out.ContinuationToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1d45baeEncodeNexusPusherInternalCore(out *jwriter.Writer, in NexusComponents) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"continuationToken\":"
		out.RawString(prefix)
		out.String(string(in.ContinuationToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NexusComponents) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF1d45baeEncodeNexusPusherInternalCore(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NexusComponents) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF1d45baeEncodeNexusPusherInternalCore(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NexusComponents) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF1d45baeDecodeNexusPusherInternalCore(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NexusComponents) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF1d45baeDecodeNexusPusherInternalCore(l, v)
}
func easyjsonF1d45baeDecodeNexusPusherInternalCore1(in *jlexer.Lexer, out *NexusComponentAsset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "downloadUrl":
			out.DownloadURL = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "repository":
			out.Repository = string(in.String())
		case "format":
			out.Format = string(in.String())
		case "checksum":
			easyjsonF1d45baeDecode(in, &out.Checksum)
		case "contentType":
			out.ContentType = string(in.String())
		case "lastModified":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastModified).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1d45baeEncodeNexusPusherInternalCore1(out *jwriter.Writer, in NexusComponentAsset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"downloadUrl\":"
		out.RawString(prefix[1:])
		out.String(string(in.DownloadURL))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"repository\":"
		out.RawString(prefix)
		out.String(string(in.Repository))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		easyjsonF1d45baeEncode(out, in.Checksum)
	}
	{
		const prefix string = ",\"contentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	{
		const prefix string = ",\"lastModified\":"
		out.RawString(prefix)
		out.Raw((in.LastModified).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NexusComponentAsset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF1d45baeEncodeNexusPusherInternalCore1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NexusComponentAsset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF1d45baeEncodeNexusPusherInternalCore1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NexusComponentAsset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF1d45baeDecodeNexusPusherInternalCore1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NexusComponentAsset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF1d45baeDecodeNexusPusherInternalCore1(l, v)
}
func easyjsonF1d45baeDecode(in *jlexer.Lexer, out *struct {
	AdditionalProp1 struct{} `json:"additionalProp1"`
	AdditionalProp2 struct{} `json:"additionalProp2"`
	AdditionalProp3 struct{} `json:"additionalProp3"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "additionalProp1":
			easyjsonF1d45baeDecode1(in, &out.AdditionalProp1)
		case "additionalProp2":
			easyjsonF1d45baeDecode1(in, &out.AdditionalProp2)
		case "additionalProp3":
			easyjsonF1d45baeDecode1(in, &out.AdditionalProp3)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1d45baeEncode(out *jwriter.Writer, in struct {
	AdditionalProp1 struct{} `json:"additionalProp1"`
	AdditionalProp2 struct{} `json:"additionalProp2"`
	AdditionalProp3 struct{} `json:"additionalProp3"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"additionalProp1\":"
		out.RawString(prefix[1:])
		easyjsonF1d45baeEncode1(out, in.AdditionalProp1)
	}
	{
		const prefix string = ",\"additionalProp2\":"
		out.RawString(prefix)
		easyjsonF1d45baeEncode1(out, in.AdditionalProp2)
	}
	{
		const prefix string = ",\"additionalProp3\":"
		out.RawString(prefix)
		easyjsonF1d45baeEncode1(out, in.AdditionalProp3)
	}
	out.RawByte('}')
}
func easyjsonF1d45baeDecode1(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1d45baeEncode1(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonF1d45baeDecodeNexusPusherInternalCore2(in *jlexer.Lexer, out *NexusComponent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "repository":
			out.Repository = string(in.String())
		case "format":
			out.Format = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "assets":
			if in.IsNull() {
				in.Skip()
				out.Assets = nil
			} else {
				in.Delim('[')
				if out.Assets == nil {
					if !in.IsDelim(']') {
						out.Assets = make([]*NexusComponentAsset, 0, 8)
					} else {
						out.Assets = []*NexusComponentAsset{}
					}
				} else {
					out.Assets = (out.Assets)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *NexusComponentAsset
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(NexusComponentAsset)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Assets = append(out.Assets, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1d45baeEncodeNexusPusherInternalCore2(out *jwriter.Writer, in NexusComponent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"repository\":"
		out.RawString(prefix)
		out.String(string(in.Repository))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"assets\":"
		out.RawString(prefix)
		if in.Assets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Assets {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NexusComponent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF1d45baeEncodeNexusPusherInternalCore2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NexusComponent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF1d45baeEncodeNexusPusherInternalCore2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NexusComponent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF1d45baeDecodeNexusPusherInternalCore2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NexusComponent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF1d45baeDecodeNexusPusherInternalCore2(l, v)
}
